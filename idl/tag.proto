
syntax = "proto3";
package tag;

option go_package="./idl/gen/tag";

message BaseResp {
    int64 err_no = 1;
    string err_msg = 2;
}
message Tag {
    string id = 1;
    string content = 2;
    int64 updated_at = 3;  // 对于用户来说，这是用户最后一次使用这个tag的时间，对于电影来说，这是电影最后一次被打这个tag的时间
    int64 n_times = 4; // 对于用户来说，这是用户使用这个tag的次数，对于电影来说，这是电影被打上这个tag的次数
}

message CreateTagReq {
    string user_id = 1;
    string movie_id = 2;
    string tag_content = 3;
}
message CreateTagResp {
    BaseResp base_resp = 1;
}

message QueryMovieTagReq {
    string user_id = 1;
    string movie_id = 2;
}
message QueryMovieTagResp {
    BaseResp base_resp = 1;
    repeated Tag tags = 2;
}

message QueryUserTagCloudReq {
    string user_id = 1;
    int64 n_tags = 2;   // 查询k大频率的tag
}
message QueryUserTagCloudResp {
    BaseResp base_resp = 1;
    repeated Tag tags = 2;
}

message QueryTagRecordsReq {
    string user_id = 1;
    int64 page = 2;
    int64 offset = 3;
}
message QueryTagRecordsResp {
    BaseResp base_resp = 1;
    repeated Tag tags = 2;
    int64 n_records = 3;
}

message QueryMovieTopNTagsReq {
    string movie_id = 1;
    int64 n_tags = 2;
}
message QueryMovieTopNTagsResp {
    BaseResp base_resp = 1;
    repeated Tag tags = 2;
}

service TagService {
    rpc CreateTag(CreateTagReq) returns (CreateTagResp) {}
    rpc QueryMovieTag(QueryMovieTagReq) returns (QueryMovieTagResp) {}
    rpc QueryUserTagCloud(QueryUserTagCloudReq) returns (QueryUserTagCloudResp) {}
    rpc QueryTagRecords(QueryTagRecordsReq) returns (QueryTagRecordsResp) {}
    rpc QueryMovieTopNTags(QueryMovieTopNTagsReq) returns (QueryMovieTopNTagsResp) {}
}
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tag

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TagServiceClient is the client API for TagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagServiceClient interface {
	CreateTag(ctx context.Context, in *CreateTagReq, opts ...grpc.CallOption) (*CreateTagResp, error)
	QueryMovieTag(ctx context.Context, in *QueryMovieTagReq, opts ...grpc.CallOption) (*QueryMovieTagResp, error)
	QueryUserTagCloud(ctx context.Context, in *QueryUserTagCloudReq, opts ...grpc.CallOption) (*QueryUserTagCloudResp, error)
	QueryTagRecords(ctx context.Context, in *QueryTagRecordsReq, opts ...grpc.CallOption) (*QueryTagRecordsResp, error)
	QueryMovieTopNTags(ctx context.Context, in *QueryMovieTopNTagsReq, opts ...grpc.CallOption) (*QueryMovieTopNTagsResp, error)
}

type tagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTagServiceClient(cc grpc.ClientConnInterface) TagServiceClient {
	return &tagServiceClient{cc}
}

func (c *tagServiceClient) CreateTag(ctx context.Context, in *CreateTagReq, opts ...grpc.CallOption) (*CreateTagResp, error) {
	out := new(CreateTagResp)
	err := c.cc.Invoke(ctx, "/tag.TagService/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) QueryMovieTag(ctx context.Context, in *QueryMovieTagReq, opts ...grpc.CallOption) (*QueryMovieTagResp, error) {
	out := new(QueryMovieTagResp)
	err := c.cc.Invoke(ctx, "/tag.TagService/QueryMovieTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) QueryUserTagCloud(ctx context.Context, in *QueryUserTagCloudReq, opts ...grpc.CallOption) (*QueryUserTagCloudResp, error) {
	out := new(QueryUserTagCloudResp)
	err := c.cc.Invoke(ctx, "/tag.TagService/QueryUserTagCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) QueryTagRecords(ctx context.Context, in *QueryTagRecordsReq, opts ...grpc.CallOption) (*QueryTagRecordsResp, error) {
	out := new(QueryTagRecordsResp)
	err := c.cc.Invoke(ctx, "/tag.TagService/QueryTagRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) QueryMovieTopNTags(ctx context.Context, in *QueryMovieTopNTagsReq, opts ...grpc.CallOption) (*QueryMovieTopNTagsResp, error) {
	out := new(QueryMovieTopNTagsResp)
	err := c.cc.Invoke(ctx, "/tag.TagService/QueryMovieTopNTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagServiceServer is the server API for TagService service.
// All implementations must embed UnimplementedTagServiceServer
// for forward compatibility
type TagServiceServer interface {
	CreateTag(context.Context, *CreateTagReq) (*CreateTagResp, error)
	QueryMovieTag(context.Context, *QueryMovieTagReq) (*QueryMovieTagResp, error)
	QueryUserTagCloud(context.Context, *QueryUserTagCloudReq) (*QueryUserTagCloudResp, error)
	QueryTagRecords(context.Context, *QueryTagRecordsReq) (*QueryTagRecordsResp, error)
	QueryMovieTopNTags(context.Context, *QueryMovieTopNTagsReq) (*QueryMovieTopNTagsResp, error)
	mustEmbedUnimplementedTagServiceServer()
}

// UnimplementedTagServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTagServiceServer struct {
}

func (UnimplementedTagServiceServer) CreateTag(context.Context, *CreateTagReq) (*CreateTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedTagServiceServer) QueryMovieTag(context.Context, *QueryMovieTagReq) (*QueryMovieTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMovieTag not implemented")
}
func (UnimplementedTagServiceServer) QueryUserTagCloud(context.Context, *QueryUserTagCloudReq) (*QueryUserTagCloudResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserTagCloud not implemented")
}
func (UnimplementedTagServiceServer) QueryTagRecords(context.Context, *QueryTagRecordsReq) (*QueryTagRecordsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTagRecords not implemented")
}
func (UnimplementedTagServiceServer) QueryMovieTopNTags(context.Context, *QueryMovieTopNTagsReq) (*QueryMovieTopNTagsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMovieTopNTags not implemented")
}
func (UnimplementedTagServiceServer) mustEmbedUnimplementedTagServiceServer() {}

// UnsafeTagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagServiceServer will
// result in compilation errors.
type UnsafeTagServiceServer interface {
	mustEmbedUnimplementedTagServiceServer()
}

func RegisterTagServiceServer(s grpc.ServiceRegistrar, srv TagServiceServer) {
	s.RegisterService(&TagService_ServiceDesc, srv)
}

func _TagService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tag.TagService/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).CreateTag(ctx, req.(*CreateTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_QueryMovieTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMovieTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).QueryMovieTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tag.TagService/QueryMovieTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).QueryMovieTag(ctx, req.(*QueryMovieTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_QueryUserTagCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserTagCloudReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).QueryUserTagCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tag.TagService/QueryUserTagCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).QueryUserTagCloud(ctx, req.(*QueryUserTagCloudReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_QueryTagRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTagRecordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).QueryTagRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tag.TagService/QueryTagRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).QueryTagRecords(ctx, req.(*QueryTagRecordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_QueryMovieTopNTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMovieTopNTagsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).QueryMovieTopNTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tag.TagService/QueryMovieTopNTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).QueryMovieTopNTags(ctx, req.(*QueryMovieTopNTagsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TagService_ServiceDesc is the grpc.ServiceDesc for TagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tag.TagService",
	HandlerType: (*TagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTag",
			Handler:    _TagService_CreateTag_Handler,
		},
		{
			MethodName: "QueryMovieTag",
			Handler:    _TagService_QueryMovieTag_Handler,
		},
		{
			MethodName: "QueryUserTagCloud",
			Handler:    _TagService_QueryUserTagCloud_Handler,
		},
		{
			MethodName: "QueryTagRecords",
			Handler:    _TagService_QueryTagRecords_Handler,
		},
		{
			MethodName: "QueryMovieTopNTags",
			Handler:    _TagService_QueryMovieTopNTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/tag.proto",
}
